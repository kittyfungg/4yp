{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b9839515",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Rmax code, cuda incompatible\n",
    "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "class Memory:\n",
    "    def __init__(self):\n",
    "        self.actions = []\n",
    "        self.states = []\n",
    "        self.logprobs = []\n",
    "        self.rewards = []\n",
    "\n",
    "    def clear_memory(self):\n",
    "        del self.actions[:]\n",
    "        del self.states[:]\n",
    "        del self.logprobs[:]\n",
    "        del self.rewards[:]\n",
    "        \n",
    "class RmaxAgent:\n",
    "\n",
    "    def __init__(self, env, R_max, gamma, max_visits_per_state, max_episodes, max_steps, epsilon = 0.2):\n",
    "        self.gamma = gamma\n",
    "        self.epsilon = epsilon\n",
    "        self.max_steps = max_steps\n",
    "        self.max_visits_per_state = max_visits_per_state\n",
    "        self.max_episodes = max_episodes\n",
    "        self.Q = torch.ones((env.d * 2, env.d)).mul(R_max / (1 - self.gamma)).to(device)\n",
    "        self.R = torch.zeros((env.d * 2, env.d)).to(device)  #Slide 33 of this Stanford ppt suggested this change and it worked pretty well \n",
    "        #https://web.stanford.edu/class/cs234/slides/2017/lecture10_sample_efficiency.pdf\n",
    "        self.nSA = torch.zeros((env.d * 2, env.d)).to(device)\n",
    "        self.nSAS = torch.zeros((env.d * 2, env.d, env.d * 2)).to(device)\n",
    "        self.val1 = []\n",
    "        self.val2 = []  #This is for keeping track of rewards over time and for plotting purposes  \n",
    "        #print(int( math.ceil(math.log(1 / (self.epsilon * (1-self.gamma))) / (1-self.gamma))))\n",
    "        \n",
    "    def select_action(self, state):\n",
    "        if np.random.random() > (1-self.epsilon):\n",
    "            action = env.action_space.sample()\n",
    "        else:\n",
    "            action = torch.max(self.Q[state])\n",
    "        return action \n",
    "    \n",
    "    def update(self, memory):\n",
    "\n",
    "        for episode in range(self.max_episodes):\n",
    "\n",
    "            state = env.reset()\n",
    "            mnumber = int( math.ceil(math.log(1 / (self.epsilon * (1-self.gamma))) / (1-self.gamma)))\n",
    "            if(episode % 20 == 0):\n",
    "                self.val1.append(self.mean_rewards_per_500())\n",
    "                self.val2.append(episode)            \n",
    "            \n",
    "            for step in range(self.max_steps):\n",
    "\n",
    "                #best_action = self.choose_action(obs)\n",
    "                #best_action = np.argmax(self.Q[observation])\n",
    "                best_action = torch.max(self.Q[observation])\n",
    "                new_state, reward, done, _ = env.step(best_action)\n",
    "                #print(obs)\n",
    "                if self.nSA[state][best_action] < self.max_visits_per_state :\n",
    "\n",
    "                    self.nSA[state][best_action] +=1\n",
    "                    self.R[state][best_action] += reward\n",
    "                    self.nSAS[state][best_action][new_obs] += 1\n",
    "\n",
    "                    if self.nSA[state][best_action] == self.max_visits_per_state:\n",
    "\n",
    "                        for i in range(mnumber):\n",
    "\n",
    "                            for s in range(env.d * 2):\n",
    "                                \n",
    "                                for a in range(env.d):\n",
    "\n",
    "                                    if self.nSA[s][a] >= self.max_visits_per_state:\n",
    "                                        \n",
    "                                        #In the cited paper it is given that reward[s,a]= summation of rewards / nSA[s,a]\n",
    "                                        #We have already calculated the summation of rewards in line 28\n",
    "                                        q = (self.R[s][a]/self.nSA[s][a])\n",
    "\n",
    "                                        for next_state in range(env.d * 2):\n",
    "                                            \n",
    "                                            #In the cited paper it is given that transition[s,a] = nSAS'[s,a,s']/nSA[s,a]\n",
    "\n",
    "                                            transition = self.nSAS[s][a][next_state]/self.nSA[s][a]\n",
    "                                            q += (transition * torch.max(self.Q[next_state,:]))\n",
    "\n",
    "                                        self.Q[s][a] = q \n",
    "                                        #print(q + self.gamma*(self.R[state][action]/self.nSA[state][action]))\n",
    "                                        #In the cited paper it is given that reward[s,a]= summation of rewards / nSA[s,a]\n",
    "                                        #We have already calculated the summation of rewards in line 28\n",
    "\n",
    "                if done:\n",
    "                    if not(reward==1):\n",
    "                        self.R[state][best_action]=-10\n",
    "                    break\n",
    "\n",
    "                state = new_state  \n",
    "\n",
    "    def mean_rewards_per_500(self):\n",
    "        \n",
    "        total_reward = 0\n",
    "        for episodes in range(500):\n",
    "            state = env.reset()\n",
    "            for _ in range(1000):\n",
    "\n",
    "                action = self.choose_action(state)\n",
    "                state, reward, done, info = env.step(action)\n",
    "                total_reward += reward\n",
    "                if done:\n",
    "                    state = env.reset()\n",
    "                    break\n",
    "        return (total_reward/500) \n",
    "\n",
    "    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "kittymfos",
   "language": "python",
   "name": "kittymfos"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
